<IfModule mod_shib>
	<VirtualHost dspace-clarin-it.ilc.cnr.it:443>
		ServerAdmin dspace-clarin-it-ilc-help@ilc.cnr.it
		ServerName dspace-clarin-it.ilc.cnr.it

		DocumentRoot /var/www/ilc-dspace

        ScriptAlias /cgi-bin/ /var/www/ilc-dspace/secure/
        # temporary patch for https://jira.duraspace.org/browse/DS-3094 (Apache) 
        # If your DSpace XMLUI URL starts with "/xmlui", you should use this instead:
        
        #RewriteRule ^/+repository/+xmlui/+themes/.*:.*$ /repository/xmlui/error [R=permanent,L]
        RewriteEngine On

		# handle cmdi requests with redirects
		# comment rewrite for solr start from version 2017.03.1
		# RewriteCond %{REQUEST_URI} ^(.*)/repository/xmlui/JSON/solr/(.*)$
		# RewriteRule ^(.*)/repository/xmlui/JSON/solr/(.*)$ http://localhost:8080/repository/solr/search/select/?q=*:*&rows=0&facet=on&wt=json&indent=true&facet.field=$2 [P]
		# ProxyPass http://localhost:8080

		# RewriteCond %{HTTP_ACCESS} (.*cmdi.xml.*)
		# RewriteCond %{REQUEST_URI} ^(.*)/xmlui/handle/(.*)$
		# RewriteRule ^(.*)/xmlui/handle/(.*)$ https://dev-clarin.ilc.cnr.it$1/oai/cite?metadataPrefix=cmdi&handle=$2 [R,L]

		RewriteCond %{HTTP_ACCESS} (.*cmdi.xml.*)
		RewriteCond %{REQUEST_URI} ^(.*)/xmlui/handle/(.*)$
		RewriteRule ^(.*)/xmlui/handle/(.*)$ https://dspace-clarin-it.ilc.cnr.it$1/oai/cite?metadataPrefix=cmdi&handle=$2 [R,L]

		# RewriteCond %{QUERY_STRING} format=cmdi [NC]
		# RewriteCond %{REQUEST_URI} ^(.*)/xmlui/handle/(.*)$
		# RewriteRule ^(.*)/xmlui/handle/(.*)$ https://dev-clarin.ilc.cnr.it$1/oai/cite?metadataPrefix=cmdi&handle=$2 [R,L]

		RewriteCond %{QUERY_STRING} format=cmdi [NC]
		RewriteCond %{REQUEST_URI} ^(.*)/xmlui/handle/(.*)$
		RewriteRule ^(.*)/xmlui/handle/(.*)$ https://dspace-clarin-it.ilc.cnr.it$1/oai/cite?metadataPrefix=cmdi&handle=$2 [R,L]

		RewriteCond %{REQUEST_URI} ^/repository$
		RewriteRule (.*) /repository/xmlui [R,L]

		# xsendfile
		XSendFile On
		XSendFilePath /opt/java/ilc4clarin-dspace/ilc4clarin/installations/assetstore/

		# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
		# error, crit, alert, emerg.
		# It is also possible to configure the loglevel for particular
		# modules, e.g.
		#LogLevel info ssl:warn
		LogLevel info ssl:debug

		ErrorLog ${APACHE_LOG_DIR}/dspace-clarin-it-error.log
		CustomLog ${APACHE_LOG_DIR}/dspace-clarin-it-access.log combined

        ProxyPass  /Shibboleth.sso !

        # These configurations say: By default, redirect ALL requests to port 8009
        # (The port MUST match the port of your Tomcat AJP Connector. By default this usually is 8009)
        ProxyPass         /repository  ajp://dspace-clarin-it.ilc.cnr.it:8009/repository
        ProxyPassReverse  /repository  ajp://dspace-clarin-it.ilc.cnr.it:8009/repository


		# For most configuration files from conf-available/, which are
		# enabled or disabled at a global level, it is possible to
		# include a line for only one particular virtual host. For example the
		# following line enables the CGI configuration for this host only
		# after it has been globally disabled with "a2disconf".
		#Include conf-available/serve-cgi-bin.conf

		#   SSL Engine Switch:
		#   Enable/Disable SSL for this virtual host.
		SSLEngine on

		SSLProxyEngine on
		SSLProxyVerify none
		SSLProxyCheckPeerCN off
		SSLProxyCheckPeerName off
		SSLProxyCheckPeerExpire off

		# aggiunti per sicurezza ssllabs 11/05/2018
		###SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
		###SSLCipherSuite "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH"
		###SSLHonorCipherOrder on
		###SSLCompression Off
		# fine

		# aggiunti per sicurezza ssllabs 15/05/2018
		SSLProtocol TLSv1.2
		SSLCipherSuite "HIGH:!aNULL:!MD5:!3DES:!CAMELLIA:!AES128"
# 16/03/2021
# disattivato TLS 1.3 perch√© il Tomcat sotto non lo supporta, i dati non appaiono
# per attivarlo scommenta le 2 righe successive e commenta le 2 righe precedenti
	#	SSLProtocol TLSv1.2 TLSv1.3
	#	SSLCipherSuite "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256"
		SSLUseStapling on
		SSLOpenSSLConfCmd DHParameters "/etc/apache2/ssl/dh_4096.pem"
		SSLHonorCipherOrder on
		SSLCompression Off
		# fine


		#   A self-signed (snakeoil) certificate can be created by installing
		#   the ssl-cert package. See
		#   /usr/share/doc/apache2/README.Debian.gz for more info.
		#   If both key and certificate are stored in the same file, only the
		#   SSLCertificateFile directive is needed.
###		SSLCertificateFile    /etc/apache2/ssl/dev-clarin.crt
###		SSLCertificateKeyFile /etc/apache2/ssl/dev-clarin.key
#		SSLCertificateFile    /etc/apache2/ssl/dspace-clarin-it_ilc_cnr_it/dspace-clarin-it_ilc_cnr_it.crt
#		SSLCertificateKeyFile /etc/apache2/ssl/dspace-clarin-it_ilc_cnr_it/dspace-clarin-it_ilc_cnr_it.key
##		SSLCertificateFile    /etc/apache2/ssl/dspace-clarin-it_ilc_cnr_it/dspace-clarin-it_lets_cert.pem
##		SSLCertificateKeyFile /etc/apache2/ssl/dspace-clarin-it_ilc_cnr_it/dspace-clarin-it_lets_key.pem
		SSLCertificateFile    /etc/apache2/ssl/dspace-clarin-it_ilc_cnr_it/dspace-clarin-it_ilc_cnr_it_cert_sectigo.cer
		SSLCertificateKeyFile /etc/apache2/ssl/dspace-clarin-it_ilc_cnr_it/dspace-clarin-it.ilc.cnr.it_sectigo.key

		#   Server Certificate Chain:
		#   Point SSLCertificateChainFile at a file containing the
		#   concatenation of PEM encoded CA certificates which form the
		#   certificate chain for the server certificate. Alternatively
		#   the referenced file can be the same as SSLCertificateFile
		#   when the CA certificates are directly appended to the server
		#   certificate for convinience.
		#SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt

###             SSLCertificateChainFile /etc/apache2/ssl/lets-ca.pem
#		SSLCertificateChainFile /etc/apache2/ssl/dspace-clarin-it_ilc_cnr_it/Lets-CA.pem
	#	SSLCertificateChainFile /etc/apache2/ssl/dspace-clarin-it_ilc_cnr_it/dspace-clarin-it_ilc_cnr_it_chain_sectigo.cer

		#   Certificate Authority (CA):
		#   Set the CA certificate verification path where to find CA
		#   certificates for client authentication or alternatively one
		#   huge file containing all of them (file must be PEM encoded)
		#   Note: Inside SSLCACertificatePath you need hash symlinks
		#		 to point to the certificate files. Use the provided
		#		 Makefile to update the hash symlinks after changes.
		#SSLCACertificatePath /etc/ssl/certs/
		#SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt
		SSLCACertificateFile /etc/apache2/ssl/dspace-clarin-it_ilc_cnr_it/dspace-clarin-it_ilc_cnr_it_interm_CA_sectigo.cer

		#   Certificate Revocation Lists (CRL):
		#   Set the CA revocation path where to find CA CRLs for client
		#   authentication or alternatively one huge file containing all
		#   of them (file must be PEM encoded)
		#   Note: Inside SSLCARevocationPath you need hash symlinks
		#		 to point to the certificate files. Use the provided
		#		 Makefile to update the hash symlinks after changes.
		#SSLCARevocationPath /etc/apache2/ssl.crl/
		#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

		#   Client Authentication (Type):
		#   Client certificate verification type and depth.  Types are
		#   none, optional, require and optional_no_ca.  Depth is a
		#   number which specifies how deeply to verify the certificate
		#   issuer chain before deciding the certificate is not valid.
		#SSLVerifyClient require
		#SSLVerifyDepth  10

		#   SSL Engine Options:
		#   Set various options for the SSL engine.
		#   o FakeBasicAuth:
		#	 Translate the client X.509 into a Basic Authorisation.  This means that
		#	 the standard Auth/DBMAuth methods can be used for access control.  The
		#	 user name is the `one line' version of the client's X.509 certificate.
		#	 Note that no password is obtained from the user. Every entry in the user
		#	 file needs this password: `xxj31ZMTZzkVA'.
		#   o ExportCertData:
		#	 This exports two additional environment variables: SSL_CLIENT_CERT and
		#	 SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
		#	 server (always existing) and the client (only existing when client
		#	 authentication is used). This can be used to import the certificates
		#	 into CGI scripts.
		#   o StdEnvVars:
		#	 This exports the standard SSL/TLS related `SSL_*' environment variables.
		#	 Per default this exportation is switched off for performance reasons,
		#	 because the extraction step is an expensive operation and is usually
		#	 useless for serving static content. So one usually enables the
		#	 exportation for CGI and SSI requests only.
		#   o OptRenegotiate:
		#	 This enables optimized SSL connection renegotiation handling when SSL
		#	 directives are used in per-directory context.
		#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
		<FilesMatch "\.(cgi|shtml|phtml|php)$">
				SSLOptions +StdEnvVars
		</FilesMatch>
		<Directory /usr/lib/cgi-bin>
				SSLOptions +StdEnvVars
		</Directory>


		# try to rewrite
		#RewriteRule ^/LatMorphWebApp/(.*) http://cophilab.ilc.cnr.it:8080/LatMorphWebApp/ [R,L]
		include conf-enabled/shib-dspace-clarin-it.conf

 		


		#   SSL Protocol Adjustments:
		#   The safe and default but still SSL/TLS standard compliant shutdown
		#   approach is that mod_ssl sends the close notify alert but doesn't wait for
		#   the close notify alert from client. When you need a different shutdown
		#   approach you can use one of the following variables:
		#   o ssl-unclean-shutdown:
		#	 This forces an unclean shutdown when the connection is closed, i.e. no
		#	 SSL close notify alert is send or allowed to received.  This violates
		#	 the SSL/TLS standard but is needed for some brain-dead browsers. Use
		#	 this when you receive I/O errors because of the standard approach where
		#	 mod_ssl sends the close notify alert.
		#   o ssl-accurate-shutdown:
		#	 This forces an accurate shutdown when the connection is closed, i.e. a
		#	 SSL close notify alert is send and mod_ssl waits for the close notify
		#	 alert of the client. This is 100% SSL/TLS standard compliant, but in
		#	 practice often causes hanging connections with brain-dead browsers. Use
		#	 this only for browsers where you know that their SSL implementation
		#	 works correctly.
		#   Notice: Most problems of broken clients are also related to the HTTP
		#   keep-alive facility, so you usually additionally want to disable
		#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
		#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
		#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
		#   "force-response-1.0" for this.
		# BrowserMatch "MSIE [2-6]" \
		#		nokeepalive ssl-unclean-shutdown \
		#		downgrade-1.0 force-response-1.0

		# autocomplete

	# Autocomplete

	</VirtualHost>
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
